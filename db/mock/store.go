// Code generated by MockGen. DO NOT EDIT.
// Source: birdie/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "birdie/db/sqlc"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCarnet mocks base method.
func (m *MockStore) CreateCarnet(arg0 context.Context, arg1 db.CreateCarnetParams) (db.Carnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarnet", arg0, arg1)
	ret0, _ := ret[0].(db.Carnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarnet indicates an expected call of CreateCarnet.
func (mr *MockStoreMockRecorder) CreateCarnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarnet", reflect.TypeOf((*MockStore)(nil).CreateCarnet), arg0, arg1)
}

// CreateKid mocks base method.
func (m *MockStore) CreateKid(arg0 context.Context, arg1 db.CreateKidParams) (db.Kid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKid", arg0, arg1)
	ret0, _ := ret[0].(db.Kid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKid indicates an expected call of CreateKid.
func (mr *MockStoreMockRecorder) CreateKid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKid", reflect.TypeOf((*MockStore)(nil).CreateKid), arg0, arg1)
}

// CreateKidNote mocks base method.
func (m *MockStore) CreateKidNote(arg0 context.Context, arg1 db.CreateKidNoteParams) (db.KidNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKidNote", arg0, arg1)
	ret0, _ := ret[0].(db.KidNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKidNote indicates an expected call of CreateKidNote.
func (mr *MockStoreMockRecorder) CreateKidNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKidNote", reflect.TypeOf((*MockStore)(nil).CreateKidNote), arg0, arg1)
}

// CreateTeacher mocks base method.
func (m *MockStore) CreateTeacher(arg0 context.Context, arg1 db.CreateTeacherParams) (db.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacher", arg0, arg1)
	ret0, _ := ret[0].(db.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockStoreMockRecorder) CreateTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockStore)(nil).CreateTeacher), arg0, arg1)
}

// CreateTeacherNote mocks base method.
func (m *MockStore) CreateTeacherNote(arg0 context.Context, arg1 db.CreateTeacherNoteParams) (db.TeacherNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacherNote", arg0, arg1)
	ret0, _ := ret[0].(db.TeacherNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeacherNote indicates an expected call of CreateTeacherNote.
func (mr *MockStoreMockRecorder) CreateTeacherNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacherNote", reflect.TypeOf((*MockStore)(nil).CreateTeacherNote), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetAllCarnets mocks base method.
func (m *MockStore) GetAllCarnets(arg0 context.Context) ([]db.GetAllCarnetsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCarnets", arg0)
	ret0, _ := ret[0].([]db.GetAllCarnetsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCarnets indicates an expected call of GetAllCarnets.
func (mr *MockStoreMockRecorder) GetAllCarnets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCarnets", reflect.TypeOf((*MockStore)(nil).GetAllCarnets), arg0)
}

// GetAllKidNotes mocks base method.
func (m *MockStore) GetAllKidNotes(arg0 context.Context) ([]db.KidNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKidNotes", arg0)
	ret0, _ := ret[0].([]db.KidNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKidNotes indicates an expected call of GetAllKidNotes.
func (mr *MockStoreMockRecorder) GetAllKidNotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKidNotes", reflect.TypeOf((*MockStore)(nil).GetAllKidNotes), arg0)
}

// GetAllKids mocks base method.
func (m *MockStore) GetAllKids(arg0 context.Context) ([]db.Kid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllKids", arg0)
	ret0, _ := ret[0].([]db.Kid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllKids indicates an expected call of GetAllKids.
func (mr *MockStoreMockRecorder) GetAllKids(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllKids", reflect.TypeOf((*MockStore)(nil).GetAllKids), arg0)
}

// GetAllTeacherNotes mocks base method.
func (m *MockStore) GetAllTeacherNotes(arg0 context.Context) ([]db.TeacherNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeacherNotes", arg0)
	ret0, _ := ret[0].([]db.TeacherNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeacherNotes indicates an expected call of GetAllTeacherNotes.
func (mr *MockStoreMockRecorder) GetAllTeacherNotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeacherNotes", reflect.TypeOf((*MockStore)(nil).GetAllTeacherNotes), arg0)
}

// GetAllTeachers mocks base method.
func (m *MockStore) GetAllTeachers(arg0 context.Context) ([]db.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeachers", arg0)
	ret0, _ := ret[0].([]db.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeachers indicates an expected call of GetAllTeachers.
func (mr *MockStoreMockRecorder) GetAllTeachers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeachers", reflect.TypeOf((*MockStore)(nil).GetAllTeachers), arg0)
}

// GetCarnet mocks base method.
func (m *MockStore) GetCarnet(arg0 context.Context, arg1 int64) (db.Carnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarnet", arg0, arg1)
	ret0, _ := ret[0].(db.Carnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarnet indicates an expected call of GetCarnet.
func (mr *MockStoreMockRecorder) GetCarnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarnet", reflect.TypeOf((*MockStore)(nil).GetCarnet), arg0, arg1)
}

// GetKid mocks base method.
func (m *MockStore) GetKid(arg0 context.Context, arg1 int64) (db.Kid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKid", arg0, arg1)
	ret0, _ := ret[0].(db.Kid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKid indicates an expected call of GetKid.
func (mr *MockStoreMockRecorder) GetKid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKid", reflect.TypeOf((*MockStore)(nil).GetKid), arg0, arg1)
}

// GetKidNote mocks base method.
func (m *MockStore) GetKidNote(arg0 context.Context, arg1 int64) (db.KidNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKidNote", arg0, arg1)
	ret0, _ := ret[0].(db.KidNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKidNote indicates an expected call of GetKidNote.
func (mr *MockStoreMockRecorder) GetKidNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKidNote", reflect.TypeOf((*MockStore)(nil).GetKidNote), arg0, arg1)
}

// GetKidNotesByPeriod mocks base method.
func (m *MockStore) GetKidNotesByPeriod(arg0 context.Context, arg1 db.GetKidNotesByPeriodParams) ([]db.GetKidNotesByPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKidNotesByPeriod", arg0, arg1)
	ret0, _ := ret[0].([]db.GetKidNotesByPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKidNotesByPeriod indicates an expected call of GetKidNotesByPeriod.
func (mr *MockStoreMockRecorder) GetKidNotesByPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKidNotesByPeriod", reflect.TypeOf((*MockStore)(nil).GetKidNotesByPeriod), arg0, arg1)
}

// GetTeacher mocks base method.
func (m *MockStore) GetTeacher(arg0 context.Context, arg1 int64) (db.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacher", arg0, arg1)
	ret0, _ := ret[0].(db.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacher indicates an expected call of GetTeacher.
func (mr *MockStoreMockRecorder) GetTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacher", reflect.TypeOf((*MockStore)(nil).GetTeacher), arg0, arg1)
}

// GetTeacherNote mocks base method.
func (m *MockStore) GetTeacherNote(arg0 context.Context, arg1 int64) (db.TeacherNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherNote", arg0, arg1)
	ret0, _ := ret[0].(db.TeacherNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherNote indicates an expected call of GetTeacherNote.
func (mr *MockStoreMockRecorder) GetTeacherNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherNote", reflect.TypeOf((*MockStore)(nil).GetTeacherNote), arg0, arg1)
}

// GetTeacherNotesByDate mocks base method.
func (m *MockStore) GetTeacherNotesByDate(arg0 context.Context, arg1 time.Time) ([]db.GetTeacherNotesByDateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherNotesByDate", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTeacherNotesByDateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherNotesByDate indicates an expected call of GetTeacherNotesByDate.
func (mr *MockStoreMockRecorder) GetTeacherNotesByDate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherNotesByDate", reflect.TypeOf((*MockStore)(nil).GetTeacherNotesByDate), arg0, arg1)
}

// GetTeacherNotesByPeriod mocks base method.
func (m *MockStore) GetTeacherNotesByPeriod(arg0 context.Context, arg1 db.GetTeacherNotesByPeriodParams) ([]db.GetTeacherNotesByPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherNotesByPeriod", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTeacherNotesByPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherNotesByPeriod indicates an expected call of GetTeacherNotesByPeriod.
func (mr *MockStoreMockRecorder) GetTeacherNotesByPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherNotesByPeriod", reflect.TypeOf((*MockStore)(nil).GetTeacherNotesByPeriod), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// UpdateCarnet mocks base method.
func (m *MockStore) UpdateCarnet(arg0 context.Context, arg1 db.UpdateCarnetParams) (db.Carnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarnet", arg0, arg1)
	ret0, _ := ret[0].(db.Carnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarnet indicates an expected call of UpdateCarnet.
func (mr *MockStoreMockRecorder) UpdateCarnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarnet", reflect.TypeOf((*MockStore)(nil).UpdateCarnet), arg0, arg1)
}

// UpdateKidNote mocks base method.
func (m *MockStore) UpdateKidNote(arg0 context.Context, arg1 db.UpdateKidNoteParams) (db.KidNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKidNote", arg0, arg1)
	ret0, _ := ret[0].(db.KidNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKidNote indicates an expected call of UpdateKidNote.
func (mr *MockStoreMockRecorder) UpdateKidNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKidNote", reflect.TypeOf((*MockStore)(nil).UpdateKidNote), arg0, arg1)
}

// UpdateNote mocks base method.
func (m *MockStore) UpdateNote(arg0 context.Context, arg1 db.UpdateNoteParams) (db.TeacherNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1)
	ret0, _ := ret[0].(db.TeacherNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockStoreMockRecorder) UpdateNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockStore)(nil).UpdateNote), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
