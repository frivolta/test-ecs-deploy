// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(full_name, role, email)
VALUES ($1, $2, $3)
RETURNING id, full_name, role, email, updated_at
`

type CreateUserParams struct {
	FullName string `json:"fullName"`
	Role     Role   `json:"role"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.Role, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Role,
		&i.Email,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE email=$1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, role, email, updated_at
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Role,
		&i.Email,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET role=$2
WHERE email=$1
RETURNING id, full_name, role, email, updated_at
`

type UpdateUserParams struct {
	Email string `json:"email"`
	Role  Role   `json:"role"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Role,
		&i.Email,
		&i.UpdatedAt,
	)
	return i, err
}
