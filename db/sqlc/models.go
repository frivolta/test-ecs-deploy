// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Presence string

const (
	PresenceMORNING   Presence = "MORNING"
	PresenceAFTERNOON Presence = "AFTERNOON"
	PresenceEVENING   Presence = "EVENING"
	PresenceABSENT    Presence = "ABSENT"
)

func (e *Presence) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Presence(s)
	case string:
		*e = Presence(s)
	default:
		return fmt.Errorf("unsupported scan type for Presence: %T", src)
	}
	return nil
}

type NullPresence struct {
	Presence Presence
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPresence) Scan(value interface{}) error {
	if value == nil {
		ns.Presence, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Presence.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPresence) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Presence, nil
}

type Role string

const (
	RoleTEACHER Role = "TEACHER"
	RoleADMIN   Role = "ADMIN"
	RolePARENT  Role = "PARENT"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Role, nil
}

type Carnet struct {
	ID       int64     `json:"id"`
	Date     time.Time `json:"date"`
	Quantity int32     `json:"quantity"`
	KidID    int64     `json:"kidID"`
}

type Kid struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

type KidNote struct {
	ID       int64      `json:"id"`
	Note     string     `json:"note"`
	KidID    int64      `json:"kidID"`
	Presence []Presence `json:"presence"`
	HasMeal  bool       `json:"hasMeal"`
	Date     time.Time  `json:"date"`
}

type Teacher struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

type TeacherNote struct {
	ID        int64         `json:"id"`
	Note      string        `json:"note"`
	TeacherID sql.NullInt64 `json:"teacherID"`
	Date      time.Time     `json:"date"`
}

type User struct {
	ID        int64     `json:"id"`
	FullName  string    `json:"fullName"`
	Role      Role      `json:"role"`
	Email     string    `json:"email"`
	UpdatedAt time.Time `json:"updatedAt"`
}
