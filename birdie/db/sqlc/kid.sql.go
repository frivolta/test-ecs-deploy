// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: kid.sql

package db

import (
	"context"
)

const createKid = `-- name: CreateKid :one
INSERT INTO kids(name, surname)
VALUES ($1, $2)
RETURNING id, name, surname
`

type CreateKidParams struct {
	Name    string `json:"name"`
	Surname string `json:"surname"`
}

func (q *Queries) CreateKid(ctx context.Context, arg CreateKidParams) (Kid, error) {
	row := q.db.QueryRowContext(ctx, createKid, arg.Name, arg.Surname)
	var i Kid
	err := row.Scan(&i.ID, &i.Name, &i.Surname)
	return i, err
}

const getAllKids = `-- name: GetAllKids :many
SELECT id, name, surname FROM kids
ORDER BY name
`

func (q *Queries) GetAllKids(ctx context.Context) ([]Kid, error) {
	rows, err := q.db.QueryContext(ctx, getAllKids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Kid{}
	for rows.Next() {
		var i Kid
		if err := rows.Scan(&i.ID, &i.Name, &i.Surname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKid = `-- name: GetKid :one
SELECT id, name, surname FROM kids
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetKid(ctx context.Context, id int64) (Kid, error) {
	row := q.db.QueryRowContext(ctx, getKid, id)
	var i Kid
	err := row.Scan(&i.ID, &i.Name, &i.Surname)
	return i, err
}
